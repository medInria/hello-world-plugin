// /////////////////////////////////////////////////////////////////
// Generated by medPluginGenerator
// /////////////////////////////////////////////////////////////////

#include "helloworldCannyProcess.h"

#include <dtkCore/dtkAbstractProcessFactory.h>
#include <dtkCore/dtkSmartPointer.h>

#include <dtkCore/dtkAbstractDataFactory.h>
#include <dtkCore/dtkAbstractData.h>
#include <dtkCore/dtkAbstractProcess.h>

#include <medMetaDataKeys.h>

#include <itkCannyEdgeDetectionImageFilter.h>


// /////////////////////////////////////////////////////////////////
// helloworldCannyProcessPrivate
// /////////////////////////////////////////////////////////////////

class helloworldCannyProcessPrivate
{
public:
    dtkSmartPointer <dtkAbstractData> input;
    dtkSmartPointer <dtkAbstractData> output;

    double variance;
};


// /////////////////////////////////////////////////////////////////
// helloworldCannyProcess
// /////////////////////////////////////////////////////////////////

helloworldCannyProcess::helloworldCannyProcess(void) : dtkAbstractProcess(), d(new helloworldCannyProcessPrivate)
{
    d->variance = 1;
}

helloworldCannyProcess::~helloworldCannyProcess(void)
{

}

bool helloworldCannyProcess::registered(void)
{
    return dtkAbstractProcessFactory::instance()->registerProcessType("helloworldCannyProcess", createhelloworldCannyProcess);
}

QString helloworldCannyProcess::description(void) const
{
    return "helloworldCannyProcess";
}

void helloworldCannyProcess::setInput ( dtkAbstractData *data )
{
    if ( !data )
        return;

    d->input = data;
}

void helloworldCannyProcess::setParameter ( double  data, int channel )
{
    d->variance = (unsigned int)data;
}

int helloworldCannyProcess::update ( void )
{
    if ( !d->input )
    {
        qDebug() << "in update method : d->input is NULL";
        return -1;
    }

   /* d->output = dtkAbstractDataFactory::instance()->createSmartPointer ( "itkDataImageUShortFloat3");

    // cast our input data into itk image
    typedef itk::Image <float, 3> ImageType;
    ImageType *itkInput = dynamic_cast<ImageType*>((itk::Object*)(d->input->data()));

    //compute canny
    typedef itk::CannyEdgeDetectionImageFilter <ImageType, ImageType> CannyFilter;
    CannyFilter *cannyFilter = CannyFilter::New();
    cannyFilter->SetVariance(d->variance);
    cannyFilter->SetInput(itkInput);
    cannyFilter->Update();

    // update output data
    d->output->setData(cannyFilter->GetOutput());*/

    return EXIT_SUCCESS;
}

dtkAbstractData * helloworldCannyProcess::output ( void )
{
    return ( d->output );
}


// /////////////////////////////////////////////////////////////////
// Type instantiation
// /////////////////////////////////////////////////////////////////

dtkAbstractProcess *createhelloworldCannyProcess(void)
{
    return new helloworldCannyProcess;
}


